package com.myjava.ocp.lab23.base64;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import javax.imageio.ImageIO;
import sun.misc.BASE64Decoder;

public class Base64ToImage {

    public static void main(String[] args) throws Exception {
        String sourceData = "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";
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] imageByte = decoder.decodeBuffer(sourceData);
        ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
        BufferedImage image = ImageIO.read(bis);
        bis.close();
        // write the image to a file
        String to = "src/main/java/com/myjava/ocp/lab23/base64/baby.jpg";
        File outputfile = new File(to);
        ImageIO.write(image, "jpg", outputfile);
    }
}
